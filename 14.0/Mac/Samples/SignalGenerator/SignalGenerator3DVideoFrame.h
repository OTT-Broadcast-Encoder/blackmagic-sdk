/* -LICENSE-START-
** Copyright (c) 2023 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

#pragma once

#include <atomic>
#include "com_ptr.h"
#include "DeckLinkAPI.h"

/*
 * An example class which may be used to output a frame or pair of frames to
 * a 3D capable output.
 *
 * This class implements the IDeckLinkMutableVideoFrame interface which can
 * be used to operate on the left frame.
 *
 * Access to the right frame through the IDeckLinkVideoFrame3DExtensions
 * interface:
 *
 * 	IDeckLinkVideoFrame *rightEyeFrame;
 * 	hr = threeDimensionalFrame->GetFrameForRightEye(&rightEyeFrame);
 *
 * After which IDeckLinkVideoFrame operations are performed directly
 * on the rightEyeFrame object.
 */

class SignalGenerator3DVideoFrame : public IDeckLinkMutableVideoFrame, public IDeckLinkVideoFrame3DExtensions
{
public:
	SignalGenerator3DVideoFrame(com_ptr<IDeckLinkMutableVideoFrame>& left, com_ptr<IDeckLinkMutableVideoFrame>& right);
	virtual ~SignalGenerator3DVideoFrame() = default;

	// IUnknown methods
	HRESULT			QueryInterface(REFIID iid, LPVOID *ppv) override;
	ULONG			AddRef(void) override;
	ULONG			Release(void) override;

	// IDeckLinkVideoFrame methods
	long			GetWidth(void) override;
	long			GetHeight(void) override;
	long			GetRowBytes(void) override;
	BMDPixelFormat	GetPixelFormat(void) override;
	BMDFrameFlags	GetFlags(void) override;
	HRESULT			GetBytes(void **buffer) override;

	HRESULT			GetTimecode(BMDTimecodeFormat format, IDeckLinkTimecode **timecode) override;
	HRESULT			GetAncillaryData (IDeckLinkVideoFrameAncillary **ancillary) override;

	// IDeckLinkMutableVideoFrame methods
	HRESULT			SetFlags(BMDFrameFlags newFlags) override;
	HRESULT			SetTimecode(BMDTimecodeFormat format, IDeckLinkTimecode* timecode) override;
	HRESULT			SetTimecodeFromComponents(BMDTimecodeFormat format, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t frames, BMDTimecodeFlags flags) override;
	HRESULT			SetAncillaryData(IDeckLinkVideoFrameAncillary* ancillary) override;
	HRESULT			SetTimecodeUserBits(BMDTimecodeFormat format, BMDTimecodeUserBits userBits) override;
	
	// IDeckLinkVideoFrame3DExtensions methods
	BMDVideo3DPackingFormat		Get3DPackingFormat(void) override;
	HRESULT						GetFrameForRightEye(IDeckLinkVideoFrame* *rightEyeFrame) override;

private:
	com_ptr<IDeckLinkMutableVideoFrame>		m_frameLeft;
	com_ptr<IDeckLinkMutableVideoFrame>		m_frameRight;
	std::atomic<ULONG>						m_refCount;
};
