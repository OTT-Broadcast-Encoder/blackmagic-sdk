/* -LICENSE-START-
** Copyright (c) 2023 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

#include "SignalGenerator3DVideoFrame.h"

#include <stdexcept>

SignalGenerator3DVideoFrame::SignalGenerator3DVideoFrame(com_ptr<IDeckLinkMutableVideoFrame>& left, com_ptr<IDeckLinkMutableVideoFrame>& right) :
	m_frameLeft(left),
	m_frameRight(right),
	m_refCount(1)
{
	if (!m_frameLeft)
		throw std::invalid_argument("at minimum a left frame must be defined");
}

HRESULT SignalGenerator3DVideoFrame::QueryInterface(REFIID iid, LPVOID *ppv)
{
	CFUUIDBytes		iunknown;
	HRESULT			result = E_NOINTERFACE;
	
	// Initialise the return result
	*ppv = nullptr;
	
	// Obtain the IUnknown interface and compare it the provided REFIID
	iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0)
	{
		*ppv = this;
		AddRef();
		result = S_OK;
	}
	else if (memcmp(&iid, &IID_IDeckLinkVideoFrame, sizeof(REFIID)) == 0)
	{
		*ppv = static_cast<IDeckLinkVideoFrame*>(this);
		AddRef();
		result = S_OK;
	}
	else if (memcmp(&iid, &IID_IDeckLinkMutableVideoFrame, sizeof(REFIID)) == 0)
	{
		*ppv = static_cast<IDeckLinkMutableVideoFrame*>(this);
		AddRef();
		result = S_OK;
	}
	else if (memcmp(&iid, &IID_IDeckLinkVideoFrame3DExtensions, sizeof(REFIID)) == 0)
	{
		*ppv = static_cast<IDeckLinkVideoFrame3DExtensions*>(this);
		AddRef();
		result = S_OK;
	}

	return result;
}

ULONG SignalGenerator3DVideoFrame::AddRef(void)
{
	return ++m_refCount;
}

ULONG SignalGenerator3DVideoFrame::Release(void)
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
		delete this;
	
	return newRefValue;
}

long SignalGenerator3DVideoFrame::GetWidth(void)
{
	return m_frameLeft->GetWidth();
}

long SignalGenerator3DVideoFrame::GetHeight(void)
{
	return m_frameLeft->GetHeight();
}

long SignalGenerator3DVideoFrame::GetRowBytes(void)
{
	return m_frameLeft->GetRowBytes();
}

BMDPixelFormat SignalGenerator3DVideoFrame::GetPixelFormat(void)
{
	return m_frameLeft->GetPixelFormat();
}

BMDFrameFlags SignalGenerator3DVideoFrame::GetFlags(void)
{
	return m_frameLeft->GetFlags();
}

HRESULT SignalGenerator3DVideoFrame::GetBytes(void **buffer)
{
	return m_frameLeft->GetBytes(buffer);
}

HRESULT SignalGenerator3DVideoFrame::GetTimecode(BMDTimecodeFormat format, IDeckLinkTimecode** timecode)
{
	return m_frameLeft->GetTimecode(format, timecode);
}

HRESULT SignalGenerator3DVideoFrame::GetAncillaryData(IDeckLinkVideoFrameAncillary** ancillary)
{
	return m_frameLeft->GetAncillaryData(ancillary);
}

HRESULT SignalGenerator3DVideoFrame::SetFlags(BMDFrameFlags newFlags)
{
	return m_frameLeft->SetFlags(newFlags);
}

HRESULT SignalGenerator3DVideoFrame::SetTimecode(BMDTimecodeFormat format, IDeckLinkTimecode* timecode)
{
	return m_frameLeft->SetTimecode(format, timecode);
}

HRESULT SignalGenerator3DVideoFrame::SetTimecodeFromComponents(BMDTimecodeFormat format, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t frames, BMDTimecodeFlags flags)
{
	return m_frameLeft->SetTimecodeFromComponents(format, hours, minutes, seconds, frames, flags);
}

HRESULT SignalGenerator3DVideoFrame::SetAncillaryData(IDeckLinkVideoFrameAncillary* ancillary)
{
	return m_frameLeft->SetAncillaryData(ancillary);
}

HRESULT SignalGenerator3DVideoFrame::SetTimecodeUserBits(BMDTimecodeFormat format, BMDTimecodeUserBits userBits)
{
	return m_frameLeft->SetTimecodeUserBits(format, userBits);
}

BMDVideo3DPackingFormat SignalGenerator3DVideoFrame::Get3DPackingFormat(void)
{
	return bmdVideo3DPackingLeftOnly;
}

HRESULT SignalGenerator3DVideoFrame::GetFrameForRightEye(IDeckLinkVideoFrame** rightEyeFrame)
{
	if (!m_frameRight)
		return S_FALSE;

	return m_frameRight->QueryInterface(IID_IDeckLinkVideoFrame, (void**)rightEyeFrame);
}
