/* -LICENSE-START-
 ** Copyright (c) 2022 Blackmagic Design
 **  
 ** Permission is hereby granted, free of charge, to any person or organization 
 ** obtaining a copy of the software and accompanying documentation (the 
 ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
 ** and transmit the Software, and to prepare derivative works of the Software, 
 ** and to permit third-parties to whom the Software is furnished to do so, in 
 ** accordance with:
 ** 
 ** (1) if the Software is obtained from Blackmagic Design, the End User License 
 ** Agreement for the Software Development Kit (“EULA”) available at 
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 ** 
 ** (2) if the Software is obtained from any third party, such licensing terms 
 ** as notified by that third party,
 ** 
 ** and all subject to the following:
 ** 
 ** (3) the copyright notices in the Software and this entire statement, 
 ** including the above license grant, this restriction and the following 
 ** disclaimer, must be included in all copies of the Software, in whole or in 
 ** part, and all derivative works of the Software, unless such copies or 
 ** derivative works are solely in the form of machine-executable object code 
 ** generated by a source language processor.
 ** 
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 ** DEALINGS IN THE SOFTWARE.
 ** 
 ** A copy of the Software is available free of charge at 
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 ** 
 ** -LICENSE-END-
 */

#include <atomic>
#include <functional>
#include <vector>
#include "DeckLinkAPI.h"
#include "com_ptr.h"

@class CapturePreviewAppDelegate;

typedef void (^QueryDisplayModeBlock)(BMDDisplayMode, NSString*);

class DeckLinkInputCallback : public IDeckLinkInputCallback
{
	using VideoFormatChangedHandler = std::function<void(BMDVideoInputFormatChangedEvents, com_ptr<IDeckLinkDisplayMode>, BMDDetectedVideoInputFormatFlags)>;
	using VideoFrameArrivedHandler = std::function<void(com_ptr<IDeckLinkVideoInputFrame>)>;

public:
	DeckLinkInputCallback();
	virtual ~DeckLinkInputCallback() = default;

	// IDeckLinkInputCallback interface
	HRESULT	VideoInputFormatChanged (BMDVideoInputFormatChangedEvents notificationEvents, IDeckLinkDisplayMode *newDisplayMode, BMDDetectedVideoInputFormatFlags detectedSignalFlags) override;
	HRESULT	VideoInputFrameArrived (IDeckLinkVideoInputFrame* videoFrame, IDeckLinkAudioInputPacket* audioPacket) override;
	
	// IUnknown interface
	HRESULT	QueryInterface(REFIID iid, LPVOID *ppv) override;
	ULONG	AddRef() override;
	ULONG	Release() override;

	void	setVideoFormatChangeHandler(const VideoFormatChangedHandler& handler) { m_videoFormatChangedHandler = handler; }
	void	setVideoFrameArrivalHandler(const VideoFrameArrivedHandler& handler) { m_videoFrameArrivedHandler = handler; }

private:
	VideoFormatChangedHandler			m_videoFormatChangedHandler;
	VideoFrameArrivedHandler			m_videoFrameArrivedHandler;

	std::atomic<ULONG>					m_refCount;
};

@interface DeckLinkInputDevice : NSObject
{
	com_ptr<IDeckLink>                      deckLink;
	BOOL                                    supportsFormatDetection;
	BOOL                                    isCapturing;
	BOOL                                    isActive;
	NSString*                               deviceName;
	BMDVideoConnection                      supportedVideoInputConnections;
	BMDVideoConnection                      currentVideoInputConnection;
}

@property (readonly) com_ptr<IDeckLink>     deckLink;
@property (readonly) BOOL                   supportsFormatDetection;
@property (readonly) BOOL                   isCapturing;
@property (readonly) BOOL                   isActive;
@property (readonly) NSString*              deviceName;
@property (readonly) BMDVideoConnection     supportedVideoInputConnections;
@property BMDVideoConnection                currentVideoInputConnection;

- (instancetype)init NS_UNAVAILABLE;
- (instancetype)initWithDeckLink:(const com_ptr<IDeckLink>&)deckLink
					  uiDelegate:(CapturePreviewAppDelegate*)uiDelegate NS_DESIGNATED_INITIALIZER;
- (BOOL)startCaptureWithDisplayMode:(BMDDisplayMode)displayMode screenPreviewCalback:(com_ptr<IDeckLinkScreenPreviewCallback>&) screenPreviewCallback applyDetectedInputMode:(BOOL)applyDetectedInputMode;
- (void)stopCapture;
- (void)queryDisplayModesWithBlock:(const QueryDisplayModeBlock&)block;

@end
