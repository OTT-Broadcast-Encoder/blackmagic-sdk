/* -LICENSE-START-
 ** Copyright (c) 2022 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation (the
 ** "Software") to use, reproduce, display, distribute, sub-license, execute,
 ** and transmit the Software, and to prepare derivative works of the Software,
 ** and to permit third-parties to whom the Software is furnished to do so, in
 ** accordance with:
 **
 ** (1) if the Software is obtained from Blackmagic Design, the End User License
 ** Agreement for the Software Development Kit (“EULA”) available at
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 **
 ** (2) if the Software is obtained from any third party, such licensing terms
 ** as notified by that third party,
 **
 ** and all subject to the following:
 **
 ** (3) the copyright notices in the Software and this entire statement,
 ** including the above license grant, this restriction and the following
 ** disclaimer, must be included in all copies of the Software, in whole or in
 ** part, and all derivative works of the Software, unless such copies or
 ** derivative works are solely in the form of machine-executable object code
 ** generated by a source language processor.
 **
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 **
 ** A copy of the Software is available free of charge at
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 **
 ** -LICENSE-END-
 */

#import "CapturePreview.h"
#import "DeckLinkDeviceDiscovery.h"

// DeckLinkDeviceNotificationCallback callback implementation

DeckLinkDeviceNotificationCallback::DeckLinkDeviceNotificationCallback() :
	m_deckLinkArrivalHandler(nullptr),
	m_deckLinkRemovalHandler(nullptr),
	m_refCount(1)
{
}

HRESULT DeckLinkDeviceNotificationCallback::DeckLinkDeviceArrived(IDeckLink* deckLink)
{
	if (m_deckLinkArrivalHandler)
		m_deckLinkArrivalHandler(com_ptr<IDeckLink>(deckLink));

	return S_OK;
}

HRESULT DeckLinkDeviceNotificationCallback::DeckLinkDeviceRemoved(IDeckLink* deckLink)
{
	if (m_deckLinkRemovalHandler)
		m_deckLinkRemovalHandler(com_ptr<IDeckLink>(deckLink));

	return S_OK;
}

HRESULT DeckLinkDeviceNotificationCallback::QueryInterface(REFIID iid, LPVOID *ppv)
{
	HRESULT result = S_OK;
	
	if (ppv == nullptr)
		return E_POINTER;
	
	// Obtain the IUnknown interface and compare it the provided REFIID
	CFUUIDBytes iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0)
	{
		*ppv = this;
		AddRef();
	}
	else if (memcmp(&iid, &IID_IDeckLinkDeviceNotificationCallback, sizeof(REFIID)) == 0)
	{
		*ppv = static_cast<IDeckLinkDeviceNotificationCallback*>(this);
		AddRef();
	}
	else
	{
		*ppv = nullptr;
		result = E_NOINTERFACE;
	}

	return result;
}

ULONG DeckLinkDeviceNotificationCallback::AddRef()
{
	return ++m_refCount;
}

ULONG DeckLinkDeviceNotificationCallback::Release()
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
		delete this;
	
	return newRefValue;
}


/// DeckLinkDeviceDiscovery implementation

@interface DeckLinkDeviceDiscovery ()

@property (assign) CapturePreviewAppDelegate*                       uiDelegate;
@property (assign) com_ptr<DeckLinkDeviceNotificationCallback>      callbackDelegate;
@property (assign) com_ptr<IDeckLinkDiscovery>                      deckLinkDiscovery;

- (void)onDeviceArrival:(com_ptr<IDeckLink>)deckLink;
- (void)onDeviceRemoval:(com_ptr<IDeckLink>)deckLink;

@end

@implementation DeckLinkDeviceDiscovery

- (instancetype)initWithUIDelegate:(CapturePreviewAppDelegate*)uiDelegate
{
	self = [super init];
	if (self)
	{
		_uiDelegate = uiDelegate;
		
		_deckLinkDiscovery = CreateDeckLinkDiscoveryInstance();
		if (!_deckLinkDiscovery)
		{
			[super dealloc];
			return nil;
		}

		_callbackDelegate = make_com_ptr<DeckLinkDeviceNotificationCallback>();
		_callbackDelegate->setDeviceArrivalHandler(^(com_ptr<IDeckLink> deckLink) { [self onDeviceArrival:deckLink]; });
		_callbackDelegate->setDeviceRemovalHandler(^(com_ptr<IDeckLink> deckLink) { [self onDeviceRemoval:deckLink]; });
	}
	return self;
}

- (void)dealloc
{
	[self disable];
	_callbackDelegate = nullptr;
	_deckLinkDiscovery = nullptr;
	[super dealloc];
}

- (void)enable
{
	// Install device arrival notifications
	if (_deckLinkDiscovery)
		_deckLinkDiscovery->InstallDeviceNotifications(_callbackDelegate.get());
}

- (void)disable
{
	// Uninstall device arrival notifications
	if (_deckLinkDiscovery)
		_deckLinkDiscovery->UninstallDeviceNotifications();
}

- (void)onDeviceArrival:(com_ptr<IDeckLink>)deckLink
{
	// Update UI (add new device to menu) from main thread
	deckLink.get()->AddRef();
	dispatch_async(dispatch_get_main_queue(), ^{
		[_uiDelegate addDevice:deckLink];
		deckLink.get()->Release();
	});
}

- (void)onDeviceRemoval:(com_ptr<IDeckLink>)deckLink
{
	dispatch_async(dispatch_get_main_queue(), ^{
		[_uiDelegate removeDevice:deckLink];
	});
}


@end
