/* -LICENSE-START-
 ** Copyright (c) 2023 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation (the
 ** "Software") to use, reproduce, display, distribute, sub-license, execute,
 ** and transmit the Software, and to prepare derivative works of the Software,
 ** and to permit third-parties to whom the Software is furnished to do so, in
 ** accordance with:
 **
 ** (1) if the Software is obtained from Blackmagic Design, the End User License
 ** Agreement for the Software Development Kit (“EULA”) available at
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 **
 ** (2) if the Software is obtained from any third party, such licensing terms
 ** as notified by that third party,
 **
 ** and all subject to the following:
 **
 ** (3) the copyright notices in the Software and this entire statement,
 ** including the above license grant, this restriction and the following
 ** disclaimer, must be included in all copies of the Software, in whole or in
 ** part, and all derivative works of the Software, unless such copies or
 ** derivative works are solely in the form of machine-executable object code
 ** generated by a source language processor.
 **
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 **
 ** A copy of the Software is available free of charge at
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 **
 ** -LICENSE-END-
 */

#include <map>
#include <cassert>
#include "DeckLinkCVVideoFrame.h"

static const std::map<OSType, BMDPixelFormat> kPixelFormatMap =
{
	{ kCVPixelFormatType_32BGRA,        bmdFormat8BitBGRA    },
	{ kCVPixelFormatType_32ARGB,        bmdFormat8BitARGB    },
	{ kCVPixelFormatType_30RGB,         bmdFormat10BitRGBXLE },
	{ kCVPixelFormatType_422YpCbCr8,    bmdFormat8BitYUV     },
	{ kCVPixelFormatType_422YpCbCr10,   bmdFormat10BitYUV    },
};

DeckLinkCVVideoFrame::DeckLinkCVVideoFrame(CVPixelBufferRef& cvPixelBuffer) :
	m_refCount(1)
{
	auto search = kPixelFormatMap.find(CVPixelBufferGetPixelFormatType(cvPixelBuffer));
	assert((search != kPixelFormatMap.end()) && "Unsupported pixel format");
	
	m_pixelFormat = search->second;
	
	// Retain the pixel buffer for lifetime of DeckLinkCVVideoFrame
	m_cvPixelBuffer = CVPixelBufferRetain(cvPixelBuffer);

	// Lock the CVPixelBuffer base address as no longer required for GPU access
	CVPixelBufferLockBaseAddress(m_cvPixelBuffer, kCVPixelBufferLock_ReadOnly);
}

DeckLinkCVVideoFrame::~DeckLinkCVVideoFrame()
{
	// Unlock CVPixelBuffer and release
	CVPixelBufferUnlockBaseAddress(m_cvPixelBuffer, kCVPixelBufferLock_ReadOnly);
	CVPixelBufferRelease(m_cvPixelBuffer);
}

// IDeckLinkVideoFrame implementation

long DeckLinkCVVideoFrame::GetWidth()
{
	return (long)CVPixelBufferGetWidth(m_cvPixelBuffer);
}

long DeckLinkCVVideoFrame::GetHeight()
{
	return (long)CVPixelBufferGetHeight(m_cvPixelBuffer);
}

long DeckLinkCVVideoFrame::GetRowBytes()
{
	return (long)CVPixelBufferGetBytesPerRow(m_cvPixelBuffer);
}

BMDPixelFormat DeckLinkCVVideoFrame::GetPixelFormat()
{
	return m_pixelFormat;
}

BMDFrameFlags DeckLinkCVVideoFrame::GetFlags()
{
	BMDFrameFlags flags = bmdFrameFlagDefault;
	
	// CVImageBuffer defines flipped as upper left, which is opposite to DeckLink.
	if (!CVImageBufferIsFlipped(m_cvPixelBuffer))
		flags |= bmdFrameFlagFlipVertical;
	
	return flags;
}

HRESULT DeckLinkCVVideoFrame::GetBytes(void** buffer)
{
	// The CVPixelBuffer base address is already locked by the DeckLinkCVVideoFrame constructor
	*buffer = CVPixelBufferGetBaseAddress(m_cvPixelBuffer);
	return S_OK;
}

HRESULT DeckLinkCVVideoFrame::GetTimecode(BMDTimecodeFormat format, IDeckLinkTimecode** timecode)
{
	// Timecode output is outside the scope of this sample.
	*timecode = nullptr;
	return E_NOTIMPL;
}

HRESULT DeckLinkCVVideoFrame::GetAncillaryData(IDeckLinkVideoFrameAncillary** ancillary)
{
	// Ancillary data output is outside the scope of this sample.
	*ancillary = nullptr;
	return E_NOTIMPL;
}

// IUnknown implementation

HRESULT DeckLinkCVVideoFrame::QueryInterface(REFIID iid, LPVOID *ppv)
{
	if (ppv == nullptr)
		return E_POINTER;

	CFUUIDBytes iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0)
	{
		*ppv = this;
		AddRef();
	}
	else if (memcmp(&iid, &IID_IDeckLinkVideoFrame, sizeof(REFIID)) == 0)
	{
		*ppv = static_cast<IDeckLinkVideoFrame*>(this);
		AddRef();
	}
	else
	{
		*ppv = nullptr;
		return E_NOINTERFACE;
	}

	return S_OK;
}

ULONG DeckLinkCVVideoFrame::AddRef(void)
{
	return ++m_refCount;
}

ULONG DeckLinkCVVideoFrame::Release(void)
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
		delete this;

	return newRefValue;
}
