/* -LICENSE-START-
 ** Copyright (c) 2023 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation (the
 ** "Software") to use, reproduce, display, distribute, sub-license, execute,
 ** and transmit the Software, and to prepare derivative works of the Software,
 ** and to permit third-parties to whom the Software is furnished to do so, in
 ** accordance with:
 **
 ** (1) if the Software is obtained from Blackmagic Design, the End User License
 ** Agreement for the Software Development Kit (“EULA”) available at
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 **
 ** (2) if the Software is obtained from any third party, such licensing terms
 ** as notified by that third party,
 **
 ** and all subject to the following:
 **
 ** (3) the copyright notices in the Software and this entire statement,
 ** including the above license grant, this restriction and the following
 ** disclaimer, must be included in all copies of the Software, in whole or in
 ** part, and all derivative works of the Software, unless such copies or
 ** derivative works are solely in the form of machine-executable object code
 ** generated by a source language processor.
 **
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 **
 ** A copy of the Software is available free of charge at
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 **
 ** -LICENSE-END-
 */

#include <metal_stdlib>
using namespace metal;

// Include header shared between this Metal shader code and C code executing Metal API commands.
#include "ShaderTypes.h"

// Vertex shader outputs and fragment shader inputs
struct RasterizerData
{
	float4 position [[position]];
	float4 color;
};

vertex RasterizerData
vertexShader(uint vertexID [[vertex_id]],
			 constant Vertex* vertices [[buffer(VertexShaderInputIndexVertices)]],
			 constant Uniforms& uniforms [[buffer(VertexShaderInputIndexUniforms)]])
{
	RasterizerData out;

	// Index into the array of positions to get the current vertex.
	float4 pixelSpacePosition = float4(vertices[vertexID].position, 1.0);

	// Apply transformations to the vertex
	float4 rotatedVertex = uniforms.rotationMatrix * pixelSpacePosition;
	float4 translatedVertex = uniforms.translationMatrix * rotatedVertex;
	float4 scaledVertex = uniforms.scaleMatrix * translatedVertex;
	float4 perspective = uniforms.perspectiveMatrix * scaledVertex;

	// Pass the position and input color to the rasterizer.
	out.position = vector_float4(perspective.x, perspective.y, 0.0, 1.0);
	out.color = vertices[vertexID].color;

	return out;
}

fragment float4 fragmentShader(RasterizerData in [[stage_in]])
{
	// Return the interpolated color.
	return in.color;
}
